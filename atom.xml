<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello啊 树哥~</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-21T09:11:43.826Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zmd</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简谈Javascript原型链</title>
    <link href="http://yoursite.com/2019/07/21/simpletalk-prototype/"/>
    <id>http://yoursite.com/2019/07/21/simpletalk-prototype/</id>
    <published>2019-07-21T02:22:18.000Z</published>
    <updated>2019-07-21T09:11:43.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从事H5游戏开发，有几年了，大多数情况都是用TypeScript来开发。TypeScript是Javascript的超集，所以对Javascript一些关键性知识，也不能不去了解。这里就准备用我所理解的知识，来说一下，希望对前端开发者有些帮助(特别是从一些面向对象语言转过来的前端，比如C#,JAVA)。如果有读者发现错误的知识点，烦请及时指正，不尽言谢！也欢迎转载，如有转载，请标明来源！</p><h2 id="看完本篇的之后所得"><a href="#看完本篇的之后所得" class="headerlink" title="看完本篇的之后所得"></a>看完本篇的之后所得</h2><ol><li>原型是什么</li><li>原型链是什么</li><li>如何使用原型及原型链，它们在平时编程中扮演着什么样的角色</li></ol><p>若看完不知道将讲的什么，那。。。我也没有办法~</p><p>下面大多会带着疑问的形式来，一步一步说明。</p><h2 id="分析-“原型链”-这个词"><a href="#分析-“原型链”-这个词" class="headerlink" title="分析 “原型链” 这个词"></a>分析 “原型链” 这个词</h2><blockquote><p>对原型链了然于心的，可直接略过本段落</p></blockquote><p>对于一个复杂的知识，我们可以按照拆解的方式，来进行剖析，剖析完毕在进行组合。</p><p><strong>原型</strong></p><p>先说 “原型”， 何为原型？   这里可以自己去想象一下。 </p><blockquote><p>我们看西游记的时候，熏悟空，经常会对幻化成人的妖怪说一句，“妖怪，赶快现出原形吧”。 这里的原形，是形状的形，也就是幻化成人的妖怪原来的模样，也就是这个已经成人的妖怪的原形–&gt;指向妖怪模样（example of 白骨精: 美女的外貌–由白骨幻化而来，具人的美貌同时也有妖怪的法力）。对比之下熏悟空本身就是熏悟空，无原形可现。 和Javascript中的原型有异曲同工之妙。</p></blockquote><p>而我们今天要说的原型是 <code>类型</code> 的  <code>型</code>。我们会经常会忽略一些明显但又很关键的字眼，注意这里的 型 前面的 类 。也就是说，<code>这个 型 是针对于 类 来讲的，脱离了 类 说 型 也毫无意义</code>。 </p><p><strong>链</strong></p><p>何为 链 ？ 可以想象电视剧中拴住囚犯的链条，环环相扣。<br>而在Javascript中原型链中的链，类似于数据结构中，单向链表的链。从当前节点，向后访问，一节，一节，直至遇到空节点，就把这个 链 访问完毕了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/javascript/simpletalk-prototype/JsLinkList.jpg" alt="单向链表示意图" title>                </div>                <div class="image-caption">单向链表示意图</div>            </figure><p><strong>原型链</strong></p><p>把一些 <code>原型</code> 给 <code>链</code> 起来，就成了原型链。好了，讲完了！你可以说What a load of crap!<br>注意原型和原型链是两个概念，先了解原型，在来说原型链。</p><h2 id="原型-与所属-类-的关系？"><a href="#原型-与所属-类-的关系？" class="headerlink" title="原型 与所属 类 的关系？"></a>原型 与所属 类 的关系？</h2><p>这里简单提下：</p><blockquote><p>类-是一个既定的结构，比如Javascript中的<code>function A(){this.b = 0};</code> 这里A是一个类。而<code>var a = new A();</code>这里的a是类的一个实例。类只有一个：<code>A</code>，而实例，可以有多个b、c，<code>var b = new A();var c = new A();</code>等等。而这些实例是没有原型可言的，也就体现了型的作用，型为类设！</p></blockquote><p>原型和类的关系：原型是类的一个<code>固有的 静态变量</code>，可以被类直接用<code>.</code>操作符访问，这个是Javascript的特性。</p><h2 id="原型在类中扮演的角色？"><a href="#原型在类中扮演的角色？" class="headerlink" title="原型在类中扮演的角色？"></a>原型在类中扮演的角色？</h2><ul><li>原型是一个实例。<br>这个实例有个__proto__属性，指向父类的原型。同时也可以添加自己的属性或方法。<br>父类的原型有的方法属性，当前类的实例可以直接使用，这个也是原型继承的精髓了。<br>所以原型，可以说是一种约束、规范，将方法或属性写入原型，所有继承的子类的实例可以直接使用，达到了代码复用的目的。<br>因为Javascript的属性查找机制，当前实例上面找不到属性或方法的时候，则会去实例的__proto__属性里面去找，再找不到，则去__proto__的__proto__去找，依次类推把所有的__proto__连起来，这样就形成了原型链了。<blockquote><p>tips：如果只想取当前这一节链上，有没有的属性<code>pro</code>，可以用Object的hasOwnProperty这个api，来检测是否存在这个属性<code>pro</code>，有则访问，无则不访问，达到了不<code>跨链</code>访问的目的。</p></blockquote></li></ul><h2 id="术语prototype与-proto"><a href="#术语prototype与-proto" class="headerlink" title="术语prototype与__proto__"></a>术语prototype与__proto__</h2><ul><li><p><code>prototype</code>是对于<code>类</code>来说的。<br>依据类的prototype，来制定类的结构规范，哪些方法需要放在prototype上面供子类继承使用，哪些不用让子类知道，仅写在类的内部。<br>放在prototype上面，达到了继承代码重用的目的。放在内部，达到了封装私有的效果。</p></li><li><p><code>__proto__</code>是对于类的<code>实例</code>来说的。<br>依我个人经验来说，实例仅是是使用<code>__proto__</code>(readonly)，不对其做更改，若想对其指手画脚，则需要把实例的类请来，重新教育它一下，要走流程的。类似于网上的留言：是直接喷，还是走流程呢？这里是走流程的。不走流程也行，但是编写出来的代码会特别乱。</p></li></ul><h2 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h2><p>下面的代码标记了注释，可以随意的更改。在chrome浏览器的控制台，打开console栏，copy下面代码，按回车键看输出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以打开这行注释看输出效果</span></span><br><span class="line">    <span class="comment">// this.varA = a; //这里的结果，是覆盖了原型上的varA,自身属性和原型上的属性重名时，则使用自身属性,原型上的属性则被隐藏了,达到了属性隐藏的目的。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">insideFuncOfA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是A的内部函数insideFuncOfA，不在原型上，所以子类访问不到我，仅在A内部可以访问到"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    insideFuncOfA();</span><br><span class="line">    <span class="keyword">this</span>.selfFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是A的自身属性的函数selfFunc，不在原型上，所以子类原型没有我，但子类的实例可以访问我!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    varA: <span class="number">1</span>,</span><br><span class="line">    protoFunc:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是A原型上的函数"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    doSomething:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是A原型上的函数,将要被B的原型，覆盖重写！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    A.call(<span class="keyword">this</span>, a);</span><br><span class="line">    <span class="keyword">this</span>.varB = b;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype, &#123;</span><br><span class="line">    varB: &#123;</span><br><span class="line">        value: <span class="literal">null</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        writable: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    doSomething: &#123;</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// override</span></span><br><span class="line">            A.prototype.doSomething.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); </span><br><span class="line">            <span class="comment">// call super</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"我是B,重写了A的doSomething"</span>);            </span><br><span class="line">        &#125;,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        writable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//覆盖了B原型上的构造函数</span></span><br><span class="line">B.prototype.constructor = B; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A(<span class="string">"a的a"</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B(<span class="string">"b的a"</span>,<span class="string">"b"</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> B(<span class="string">"c的a"</span>,<span class="string">"c"</span>);</span><br><span class="line"><span class="keyword">var</span> d =  B.prototype.constructor;</span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> d(<span class="string">"e的a"</span>, <span class="string">"e"</span>);</span><br><span class="line">b.doSomething(); </span><br><span class="line">b.protoFunc();</span><br><span class="line">b.selfFunc();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b是否有varA属性:"</span>, b.hasOwnProperty(<span class="string">"varA"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a是否有varA属性:"</span>, a.hasOwnProperty(<span class="string">"varA"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b的原型是否有varA属性:"</span>, B.prototype.hasOwnProperty(<span class="string">"varA"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a的原型是否有varA属性:"</span>, A.prototype.hasOwnProperty(<span class="string">"varA"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//可以试着打开下面这行注释</span></span><br><span class="line"><span class="comment">//b.__proto__.varA = 2; //可以用实例直接修改B原型的属性，但是这样，随意的更改，会造成代码的可维护性，可读写变差，没有必要的话，一般是交与类来处理。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b.varA:"</span> + b.varA); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a.varA:"</span> + a.varA); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"c.varA:"</span> + c.varA); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"e.varA:"</span> + e.varA); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(B.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(B.prototype.constructor);</span><br><span class="line"><span class="built_in">console</span>.log(A.prototype.constructor);</span><br><span class="line"><span class="comment">// a.insideFuncOfA(); //打开这行注释会报错，说明了内部函数的访问机制</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>原型和原型链是两个概念。 <font color="#FF0000">链是一个整体，包含了所有的原型。而原型则是链上的一节。</font></li><li>原型是为类服务的，是Javascript一个特性，放在上面的属性方法，可以被子类继承，被子类的实例直接使用。</li><li>原型是作为<font color="#FF0000">实例</font>的形式存在的。</li><li>原型是为了将类变的<font color="#FF0000">井井有条</font>而存在。井井有条：将类的职责结构划分清楚。 （如果这里对类的职责和结构的概念有点模糊的话，后面笔者会出相关的文章来做一些结构设计的文章。）</li></ol><h2 id="附加参考："><a href="#附加参考：" class="headerlink" title="附加参考："></a>附加参考：</h2><blockquote><p><a href="http://ituuz.com/2019/07/01/javascript-propertype/" target="_blank" rel="noopener">http://ituuz.com/2019/07/01/javascript-propertype/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从事H5游戏开发，有几年了，大多数情况都是用TypeScript来开发。TypeScript是Javascript的超集，所以对Javasc
      
    
    </summary>
    
      <category term="客户端" scheme="http://yoursite.com/categories/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
</feed>
